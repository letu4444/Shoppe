package Lazadar.config.authori;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.oidc.OidcIdToken;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import Lazadar.config.PasswordConfig;
import Lazadar.enumRole.UserRole;
import Lazadar.model.UserCredential;
import Lazadar.repository.RoleRepository;
import Lazadar.repository.UserCredenRepository;
import Lazadar.uitl.Next;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;



@Component
public class OAuth2LoginSuccessHandler extends SimpleUrlAuthenticationSuccessHandler implements AuthenticationSuccessHandler {
	
	@Autowired
	private UserCredenRepository credenRepository;

	@Autowired
	private RoleRepository repository;
	
	@Autowired
	private Next next;
	
	@Autowired
	private PasswordConfig passwordConfig;


	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
			Authentication authentication) throws IOException, ServletException {
		
		// đây để kiểm tra xem Security có tên code là gì rồi xét cho nó vào được đâu
		// Nếu nó là bên bán hàng thì đk vào bên bán hàng //Nếu nó là user thì chỉ đk
		// vào mua hàng
		//Kiểm tra xem họ đăng nhập bằg hình thức nào
		
	    HttpSession session = request.getSession();
	    String redirectUrl1 = (String) session.getAttribute("url_prior");
		if(authentication.getPrincipal().getClass() == CustomOauth2User.class) {
			 OidcUser oidcUser = (OidcUser) authentication.getPrincipal();
             OidcIdToken idToken = oidcUser.getIdToken();
             String idTokenValue = idToken.getTokenValue();
			CustomOauth2User oauth2User = (CustomOauth2User) authentication.getPrincipal();
			String oauth2ClientName = oauth2User.getOauth2ClientName();
			UserCredential userCredential = oauth2User.getCredential();
			if(credenRepository.findByEmail(userCredential.getEmail()) == null) {
				userCredential.setPassword(passwordConfig.passwordEncoder().encode("anhtu1996"));
				userCredential.setRoles(new HashSet<>(Arrays.asList(repository.findByName(UserRole.USER_ROLE))));
				credenRepository.save(userCredential);
				if (redirectUrl1 != null) {
	                session.removeAttribute("url_prior");
	                // then we redirect
	                getRedirectStrategy().sendRedirect(request, response, redirectUrl1);
	            } else {
	            	String defaulUrl = "/trangchu";
	        		getRedirectStrategy().sendRedirect(request, response, defaulUrl);
	            }
		
             }else {
         		if (redirectUrl1 != null) {
	                session.removeAttribute("url_prior");
	                // then we redirect
	                getRedirectStrategy().sendRedirect(request, response, redirectUrl1);
	            } else {
	            	String defaulUrl = "/trangchu";
	        		getRedirectStrategy().sendRedirect(request, response, defaulUrl);
	            
			}

		}
//		System.out.println(authentication.getAuthorities().stream());
//		Authentication authen = (Authentication) authentication.getAuthorities();

		List<String> roles = authentication.getAuthorities().stream()
		     .map(r -> r.getAuthority()).collect(Collectors.toList());
		System.out.println(roles.get(0));
		if (session != null && roles.get(0).equals("ROLE_USER")) {
         
            if (redirectUrl1 != null) {
                session.removeAttribute("url_prior");
                getRedirectStrategy().sendRedirect(request, response, redirectUrl1);
            } else {
            	String defaulUrl = "/trangchu";
        		getRedirectStrategy().sendRedirect(request, response, defaulUrl);
            }
        }else if (session != null && roles.get(0).equals("ROLE_ADMIN")) {
        	 if (redirectUrl1 != null) {
                 session.removeAttribute("url_prior");
                 getRedirectStrategy().sendRedirect(request, response, redirectUrl1);
             } else {
             	String defaulUrl = "/trangchu";
         		getRedirectStrategy().sendRedirect(request, response, defaulUrl);
             }
		}
		
	}

}
